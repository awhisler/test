module.exports = {
  selector: {
    caseInfo: {
      id: '[ng-bind="CaseInfo.Case.CaseNumber"]',
      caseReason: 'span[ng-bind="CaseInfo.Case.Reason.Name"]',
      caseId: 'span[ng-bind="CaseInfo.Case.CaseNumber"]',
      employeeNumber: 'span[ng-bind="EmployeeInfo.EmployeeNumber"]',
      type: '.employee-panel .panel-body > div:nth-child(1) > .col-sm-4.ng-binding',
      requestedStart: '.employee-panel .panel-body > div:nth-child(1) > .col-sm-3.ng-binding',
      requestedEnd: '.employee-panel .panel-body > div:nth-child(2) > .col-sm-3.ng-binding',
    },
    employeeInfo: {
      hireDate: '[ng-bind*="HireDate"]',
    },
    caseHistory: {
      directive: 'case-history',
    },
    createCaseForm: {
      selector: '#frmCreateCase',
      caseReporter: {
        firstName: '#CaseReporterFirstName',
        lastName: '#CaseReporterLastName',
        relationship: '#CaseReporterRelationship',
      },
      caseTypeButtonGroupInputs: '#frmCreateCase input[name="CaseTypeId"]',
      expectedCaseDates: {
        start: '#frmCreateCase input[name="StartDate"]',
        end: '#frmCreateCase input[name="EndDate"]',
      },
      reasonsItems: '#divLeaveTypeContainer input',
      calculateEligibility: '#btn-calculateEligibility',
      reviewPolices: {
        tableRows: '#review-policies #accordion .policy .panel .row.row-hover',
      },
      contactInfo: {
        header: 'div=Contact Information',
      },
      createCaseText: 'button=Create Case',
    },
    newCaseFinalModal: {
      successText: 'strong=Case created successfully!',
      createCommunicationLaterText: 'button=No, thanks. I\'ll create a communication later.',
    },
    communicationButton: '[href*="communications"]',
    returnToCaseButton: 'button=Return to Case',
    changeCaseButton: 'button=Change Case',
    caseActivityButton: '[href*="caseactivity"]',
    changeStatusButton: 'button=Change Status',
    policesStatus: {
      approved: {
        start: 'input[name="ApprovedStartDate"]',
        end: 'input[name="ApprovedEndDate"]',
      },
      denied: {
        start: 'input[name="DeniedStartDate"]',
        end: 'input[name="DeniedEndDate"]',
        denialReason: '[ng-model="changepolicy.AdjudicationDenialReasonCode"]',
      },
      pending: {
        start: 'input[name="PendingStartDate"]',
        end: 'input[name="PendingEndDate"]',
      },
      applyStatusButton: 'button=Apply Status',
      adjudicationRow: '.case-view-policies [ng-repeat*="adjudication"]',
    },
    appliedPolicies: '[ng-repeat="policy in PolicyData.AppliedPolicies"]',
    manualPolicies: '[name="frmChangeStatus"] .policy-additional',
    addManualPolicy: '[ng-model="manualPolicyToAdd"]',
    externalPolicies: {
      section: '#external-policies',
      items: '#external-policies .case-view-policies > div',
    },
    caseActivityPage: '#caseActivityFilters',
    reviewPolicies: '#review-policies',
    addAccommodationsButton: 'button=Add Accommodations',
    newAccommodationRequest: {
      generalHealthCondition: '[name="AddAccommodationRequestGHC"]',
      description: '[name="AddAccommodationRequestDesc"]',
      workRelatedYes: '#AccomodationIsWorkRelatedTrue',
      workRelatedNo: '#AccomodationIsWorkRelatedFalse',
      popUpRequestTypeButtonGroupInputs: '.modal-body input[name="RequestType"]',
      popUpDurationTypeButtonGroupInputs: '.modal-body input[name="Duration"]',
      createAccommodationButtonPopup: 'button=Create Accommodation',
    },
    changeCaseModal: {
      selector: '#changeCase',
      startDate: '#ChangeCaseStart',
      endDate: '#ChangeCaseEnd',
      newStart: '#IsStartDateNew',
      newEnd: '#IsEndDateNew',
      type: (type) => `label=${type}`,
      reducedSchedule: {
        startDate: '#txtstartDate',
        endDate: '#txtEndDate',
      },
      updateCase: 'button=Update Case',
      cancelCase: 'button=Cancel Case',
      caseCancelReason: '#ddlCaseCancel',
      caseCancelReasonOptions: (reason) => `#ddlCaseCancel > option[label="${reason}"]`,
      caseCancelConfirmation: '[ng-click="CancelCaseChange()"]',
    },
    intermittentRequestButton: 'button=Intermittent Request',
    intermittentRequestModal: {
      selector: '#intermittentRequest',
      type: '#ddIntermittent_0',
      date: '#IntermittentRequestDate_0',
      approved: '#IntermittentRequestViewModelApprovedTime_0',
      denied: '#IntermittentRequestViewModelDeniedTime_0',
      denialReasonSelect: '[ng-model="intermittentRequestViewModelList[$index].DenialReasonCode"]',
      denialReasonOther: '[ng-model="intermittentRequestViewModelList[$index].DenialReasonOther"]',
      pending: '#IntermittentRequestViewModelPendingTime_0',
      submit: 'button=Submit',
      warningPopUp: {
        selector: '#noty_customBottomCenter_layout_container',
        yes: 'button=YES, PROCEED',
      },
    },
    absenceHistory: {
      calendar: '#calendars',
      day: (date) => `td.day-${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`,
      calendarPopOver: '.popover-content.popover-content-calendar',
    },
    reopenCase: {
      button: 'button=Reopen Case',
      modalButton: '#reOpenCase button[type=submit]',
      popupYesButton: '[ng-click="ReOpenCase.IsRelapse = true"]',
      popupNoButton: '[ng-click="submitted=true;ReOpenClosedOrCancelledCase(ReOpenCase.CaseType && frmReOpenCase.$valid)"]',
      completeAndUpdateCaseButton: 'button=Complete and Update Case',
    },
    workSchedule: {
      warningMessage: 'span.warning[ng-show="scheduleDoesNotCoverSomePartOfTheDates"]',
      editLink: 'span.warning a[href*="/Employees/EditWorkSchedule/"]',
    },
  },
};
